
trigger:
  batch: true
  branches:
    include:
      - master

resources:
  repositories:
  - repository: cnp-azuredevops-libraries
    type: github
    ref: refs/heads/master
    name: hmcts/cnp-azuredevops-libraries
    endpoint: 'hmcts'

parameters:
  - name: action
    displayName: Action
    type: string
    default: 'plan'
    values:
      - plan
      - apply

  - name: location
    displayName: Location
    type: string
    default: "UK South"
    values:
      - "UK South"
      - "UK West"

  - name: components
    displayName: Component to Run
    type: object
    default:
      - deployment: "backendappgateway"
        environment: 'sbox'
        dependsOn: "Precheck"
        pipeline_tests: false
      - deployment: "backendappgateway"
        environment: "dev"
        dependsOn: "sbox_backendappgateway"
      - deployment: "backendappgateway"
        environment: "stg"
        dependsOn: "sbox_backendappgateway"
        pipeline_tests: true
      - deployment: "backendappgateway"
        environment: "demo"
        dependsOn: "sbox_backendappgateway"
      - deployment: "backendappgateway"
        environment: "ithc"
        dependsOn: "sbox_backendappgateway"
        pipeline_tests: true
      - deployment: "backendappgateway"
        environment: "test"
        dependsOn: "sbox_backendappgateway"
      - deployment: "backendappgateway"
        environment: "prod"
        dependsOn: "sbox_backendappgateway"
        pipeline_tests: true
      - deployment: "appgateway"
        environment: "sbox"
        dependsOn: "Precheck"
        pipeline_tests: false
      - deployment: "apim_appgw"
        environment: "sbox"
        dependsOn: "Precheck"
        pipeline_tests: false
      - deployment: "appgateway"
        environment: "dev"
        dependsOn: "sbox_appgateway"
      - deployment: "apim_appgw"
        environment: "dev"
        dependsOn: "sbox_apim_appgw"
      - deployment: "appgateway"
        environment: "stg"
        dependsOn: "sbox_appgateway"
        pipeline_tests: true
      - deployment: "appgateway"
        environment: "demo"
        dependsOn: "sbox_appgateway"
      - deployment: "apim_appgw"
        environment: "demo"
        dependsOn: "sbox_apim_appgw"
      - deployment: "appgateway"
        environment: "ithc"
        dependsOn: "sbox_appgateway"
        pipeline_tests: true
      - deployment: "apim_appgw"
        environment: "ithc"
        dependsOn: "sbox_apim_appgw"
        pipeline_tests: false
      - deployment: "appgateway"
        environment: "test"
        dependsOn: "sbox_appgateway"
      - deployment: "apim_appgw"
        environment: "test"
        dependsOn: "sbox_apim_appgw"
      - deployment: "apim_appgw"
        environment: "prod"
        dependsOn: "sbox_apim_appgw"
      - deployment: "apim_appgw"
        environment: "stg"
        dependsOn: "sbox_apim_appgw"
      - deployment: "appgateway"
        environment: "prod"
        dependsOn: "sbox_appgateway"
        pipeline_tests: true
      - deployment: "trafficmanager"
        environment: "dev"
        dependsOn: "Precheck"
      - deployment: "trafficmanager"
        environment: "prod"
        dependsOn: "dev_trafficmanager"
        pipeline_tests: true
      - deployment: "shutter_static_webapp"
        environment: "sbox"
        dependsOn: "Precheck"
        pipeline_tests: false
      - deployment: "shutter_static_webapp"
        environment: "prod"
        dependsOn: "sbox_shutter_static_webapp"
      - deployment: "apim"
        environment: "sbox"
        dependsOn: "Precheck"
        pipeline_tests: false
      - deployment: "apim"
        environment: "dev"
        dependsOn: "sbox_apim"
      - deployment: "apim"
        environment: "stg"
        dependsOn: "sbox_apim"
        pipeline_tests: false
      - deployment: "apim"
        environment: "prod"
        dependsOn: "stg_apim"
        pipeline_tests: false
      - deployment: "apim"
        environment: "test"
        dependsOn: "sbox_apim"
        pipeline_tests: false
      - deployment: "apim"
        environment: "demo"
        dependsOn: "sbox_apim"
        pipeline_tests: false
      - deployment: 'apim'
        environment: 'ithc'
        dependsOn: 'sbox_apim'
        pipeline_tests: false
      - deployment: 'frontdoor'
        environment: 'sbox'
        dependsOn: 'Precheck'
        pipeline_tests: false
      - deployment: 'frontdoor'
        environment: 'dev'
        dependsOn: 'sbox_frontdoor'
      - deployment: 'frontdoor'
        environment: 'stg'
        dependsOn: 'sbox_frontdoor'
        pipeline_tests: true
      - deployment: 'frontdoor'
        environment: 'demo'
        dependsOn: 'sbox_frontdoor'
      - deployment: 'frontdoor'
        environment: 'ithc'
        dependsOn: 'sbox_frontdoor'
        pipeline_tests: true
      - deployment: 'frontdoor'
        environment: 'test'
        dependsOn: 'sbox_frontdoor'
      - deployment: 'frontdoor'
        environment: 'prod'
        dependsOn: 'sbox_frontdoor'
        pipeline_tests: true
        
variables:
  - name: project
    value: application
  - name: agentPool
    value: 'ubuntu-latest'
  - name: build
    value: $(Build.BuildNumber)
  - name: businessArea
    value: 'sds'
  - name: product
    value: "sds-platform"
  - name: tfInitSub
    value: "04d27a32-7a07-48b3-95b8-3c8691e1a263"
  - template: vars/input-variables.yaml@cnp-azuredevops-libraries
  - name: timeoutInMinutes
    value: 60
  - name: finalAction
    ${{ if and(eq(variables['isMain'], true), eq(variables['isAutoTriggered'], true)) }}:
      value: 'apply'
    ${{ else }}:
      value: variables['isMain'] # ${{ parameters.action }}

stages:
  - stage: Precheck
    jobs:
      - job: Validate
        pool:
          vmImage: ${{ variables.agentPool }}
        timeoutInMinutes: ${{ variables.timeoutInMinutes }}
        steps:
          - template: steps/terraform-precheck.yaml@cnp-azuredevops-libraries
            parameters:
              keyvaultName: 'infra-vault-nonprod'
              keyvaultSecret: 'azure-devops-sp-token'
              serviceConnection: 'DCD-CFTAPPS-STG'
              overrideAction: ${{ parameters.action }}
              projectName: ${{ variables.businessArea }}
              cluster: '00'
              environment: 'sbox'
              runManualStart: true

  - ${{ each parameter in parameters.components }}:
      - stage: ${{ parameter.environment }}_${{ parameter.deployment }}
        displayName: ${{ parameter.environment }}_${{ parameter.deployment }}
        dependsOn: ${{ parameter.dependsOn }}
        jobs:
          - job: TerraformPlanApply
            pool:
              vmImage: ${{ variables.agentPool }}
            timeoutInMinutes: ${{ variables.timeoutInMinutes }}
            steps:
              - template: steps/terraform.yaml@cnp-azuredevops-libraries
                parameters:
                  overrideAction: ${{ parameters.action }}
                  environment: ${{ parameter.environment }}
                  location: ${{ parameters.location }}
                  component: ${{ parameter.deployment }}
                  serviceConnection: "OPS-APPROVAL-GATE-${{ upper(parameter.environment) }}-ENVS"
                  product: $(product)
                  terraformInitSubscription: ${{ variables.tfInitSub }}
                  planCommandOptions: >
                    -var environment=${{ parameter.environment }}
                    -var project=$(project)
          - job: PipelineTests
            pool:
              vmImage: ${{ variables.agentPool }}
            timeoutInMinutes: ${{ variables.timeoutInMinutes }}
            dependsOn: TerraformPlanApply
            condition: and(succeeded(), eq(variables['isMain'], true), eq('${{ parameter.pipeline_tests }}', 'true'))
            steps:
              - template: steps/pipeline-tests-jest.yaml@cnp-azuredevops-libraries
                parameters:
                  workingDirectory: $(Pipeline.Workspace)/s/sds-azure-platform/scripts
                  junit_output_dir: $(Pipeline.Workspace)/s/sds-azure-platform/environments/${{ parameter.environment }}/junit
                  environment: ${{ parameter.environment }}
                  product: ${{ variables.product }}
                  test_title: '${{ parameter.environment }}_${{ parameter.deployment }}'
                  ${{ if eq(parameter.deployment, 'apim') }}:
                    test_pattern: apim.test.ts
                  ${{ else }}:
                    test_pattern: pipeline.test.ts

name: "$(finalAction) - SDS Azure Platform"
