parameters:
  environment: ''
  location: ''
  stack: ''
  project: ''
  tfversion: ''

steps:
  - template: keyvault-read.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      environment: ${{ parameters.environment }}

  - task: TerraformCLI@0
    displayName: terraform init
    inputs:
      command: init
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: '$(System.DefaultWorkingDirectory)/components/${{ parameters.stack }}'
      backendType: azurerm
      backendServiceArm: $(serviceconnection)
      backendAzureRmResourceGroupName: 'azure-control-${{ parameters.environment }}-rg'
      backendAzureRmResourceGroupLocation: ${{ parameters.location }}
      backendAzureRmStorageAccountName: $(controlStorageAccount)
      backendAzureRmStorageAccountSku: Standard_LRS
      backendAzureRmContainerName: subscription-tfstate
      backendAzureRmKey: '${{ parameters.location }}/${{ parameters.project }}/$(env)/${{ parameters.stack }}/terraform.tfstate'

  - task: TerraformCLI@0
    displayName: terraform plan
    inputs:
      command: plan
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: $(System.DefaultWorkingDirectory)/components/${{ parameters.stack }}
      environmentServiceName: $(serviceconnection)
      commandOptions: '-out tfplan-${{ parameters.project }}-$(env)-${{ parameters.stack }}  -var environment=${{ parameters.enviornment }} -var project=${{ parameters.project }} -var-file $(System.DefaultWorkingDirectory)/environments/${{ parameters.enviornment }}/${{ parameters.enviornment }}.tfvars'

  - task: Bash@3
    condition: and(succeeded(), eq(variables.isMaster, true))
    name: "CheckFileChanges"
    displayName: "CheckFileChanges"
    env:
      files_list: '$(System.DefaultWorkingDirectory)/components/${{ parameters.stack }} $(System.DefaultWorkingDirectory)/environments/${{ parameters.enviornment }}/${{ parameters.enviornment }}.tfvars'
    inputs:
      filePath: pipeline-scripts/file-check-changes.sh



#
#  - task: TerraformCLI@0
#    displayName: Apply -
#    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
#    inputs:
#      command: apply - ${{ parameters.stack }} -
#      terraformVersion: ${{ parameters.tfversion }}
#      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/${{ parameters.stack }}
#      environmentServiceName: $(serviceconnection)
#      commandOptions: '--auto-approve tfplan-${{ parameters.project }}-${{ parameters.enviornment }}-${{ parameters.stack }}'
#
#
#  - task: Bash@3
#      displayName: "Remove local tfstate"
#      inputs:
#        targetType: 'inline'
#        workingDirectory: '$(System.DefaultWorkingDirectory)/components/${{ parameters.stack }}'
#        script: |
#          rm -f terraform.tfstate* && rm -rf .terraform/
#
#      - task: AzureCLI@2
#        displayName: 'Unlock TF state if required'
#        condition: always()
#        inputs:
#          scriptType: bash
#          scriptLocation: scriptPath
#          azureSubscription: $(serviceConnection)
#          scriptPath: $(System.DefaultWorkingDirectory)/pipeline-scripts/unlock-tf-state.sh
#          arguments: $(location) ${{ parameters.storage_account_name }}
