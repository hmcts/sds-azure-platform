name: SDS Azure Platform - frontdoor
trigger:
  batch: true
  branches:
    include:
      - master

parameters:
  - name: components
    displayName: Component to Run
    type: object
    default:
      - deployment: 'frontdoor'
        environment: 'sbox'

  - name: location
    displayName: Location
    type: string
    default: 'UK South'
    values:
      - 'UK South'
      - 'UK West'

variables:
  - name: tfversion
    value: 1.0.4
  - name: project
    value: application
  - name: timeoutInMinutes
    value: '360'
  - name: agentPool
    value: 'hmcts-cftptl-agent-pool'
  - name: build
    value: $(Build.BuildNumber)
  - name: isMaster
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  - name: product
    value: 'sds-platform'
  - name: tfInitSub
    value: "04d27a32-7a07-48b3-95b8-3c8691e1a263"


stages:
  - stage: Precheck
    jobs:
      - job: Validate
        timeoutInMinutes: ${{ variables.timeoutInMinutes }}
        pool:
          name: ${{ variables.agentPool }}
        steps:
        - task: TerraformInstaller@0
          displayName: Terraform install
          inputs:
            terraformVersion: ${{ variables.tfversion }}
        - task: AzureKeyVault@1
          displayName: Retrieve keyvault secret for ADO token
          inputs:
            ConnectedServiceName: DCD-CFT-Sandbox
            keyVaultName: infra-vault-sandbox
            secretsFilter: 'azure-devops-token'
            runAsPreJob: false

        - task: Bash@3
          displayName: Prevent parallel run
          env:
            thisbuild: $(Build.BuildId)
            pipelinedefinition: $(System.DefinitionId)
            azuredevopstoken: $(azure-devops-token)
          inputs:
            filePath: pipeline-scripts/builds-check.sh
        - task: PowerShell@2
          displayName: Run tests
          inputs:
            targetType: 'filePath'
            filePath: $(System.DefaultWorkingDirectory)/pipeline-scripts/pester-tests.ps1
            pwsh: true
        - task: PublishTestResults@2
          displayName: 'Publish Test Results **/TEST-*.xml'
          inputs:
            testResultsFormat: NUnit
            failTaskOnFailedTests: true
          condition: always()


  - ${{ each parameter in parameters.components }}:
      - stage: ${{ parameter.environment }}_${{ parameter.deployment }}
        displayName: ${{ parameter.environment }}_${{ parameter.deployment }}
        dependsOn: ${{ parameter.dependsOn }}
        jobs:
          - job:
            timeoutInMinutes: ${{ variables.timeoutInMinutes }}
            pool:
              name: ${{ variables.agentPool }}
            steps:
              - template: pipeline-templates/terraform.yaml
                parameters:
                  environment: ${{ parameter.environment }}
                  location: ${{ parameters.location }}
                  stack: ${{ parameter.deployment }}
                  project: $(project)
                  tfversion: $(tfversion)
                  serviceConnection: "OPS-APPROVAL-GATE-${{ upper(parameter.environment) }}-ENVS"
                  product: $(product)
                  tfInitSub: ${{ variables.tfInitSub }}
